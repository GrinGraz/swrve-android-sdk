apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        release {}
        debug {}
    }

    flavorDimensions "swrve-sdk"

    productFlavors {
        core {
            flavorDimensions "swrve-sdk"
        }
        google {
            flavorDimensions "swrve-sdk"
        }
        amazon {
            flavorDimensions "swrve-sdk"
            consumerProguardFiles 'amazon-proguard-rules.pro'
        }
        firebase {
            flavorDimensions "swrve-sdk"
        }
    }

    lintOptions {
        abortOnError true
        baseline file("../../lint/lint-baseline-swrvesdk.xml")
        disable 'GradleCompatible' // TODO remove this when play-services-ads gets upgraded again. 15.0.1 causes GradleCompatible lint error
    }
}

dependencies {
    api project(':SwrveSDKCommon')
    api project(':SwrveConversationSDK')
    api 'com.google.code.gson:gson:2.2.+'
    api 'com.android.support:support-v4:' + project.ANDROID_DESIGN_TOOLS_VERSION
    googleApi 'com.google.android.gms:play-services-gcm:' + project.GMS_PLAY_SERVICES_GCM_VERSION
    googleApi 'com.google.android.gms:play-services-ads:' + project.GMS_PLAY_SERVICES_ADS_VERSION
    googleApi project(':SwrveSDKPush')
    amazonApi project(':SwrveSDKPush')
    // The amazon-device-messaging jar is not distributed with Swrve source code and a stubbed out
    // version is used instead. If compiling amazon flavour from source you should delete the
    // stubbed version in providedLibs, and replace with official jar downloaded from the Amazon
    // Developer portal (https://developer.amazon.com/device-messaging).
    amazonCompileOnly fileTree(dir: "providedLibs", include: ['amazon-device-messaging*.jar'])
    firebaseApi project(':SwrveSDKPush')
    firebaseApi 'com.google.android.gms:play-services-ads:' + project.GMS_PLAY_SERVICES_ADS_VERSION
    firebaseApi 'com.google.firebase:firebase-messaging:' + project.FIREBASE_MESSAGING_VERSION
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    repositories {
        maven {
            url "$buildDir/../publish" // SwrveSDK/publish
        }
    }

    publications {
        core(MavenPublication) {

            artifactId project.SWRVE_CORE_ARTIFACT_ID
            groupId project.SWRVE_GROUP_ID
            version project.SWRVE_SDK_VERSION
            artifacts = [androidCoreJavadocsJar, "$buildDir/outputs/aar/${project.name}-core-release.aar", androidCoreSourcesJar]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each

                configurations.getByName("coreReleaseCompileClasspath").allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (it.name == 'SwrveSDKCommon') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_COMMON_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else if (it.name == 'SwrveConversationSDK') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_CONVERSATIONS_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else {
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }
            }
        }
        google(MavenPublication) {
            artifactId project.SWRVE_GOOGLE_ARTIFACT_ID
            groupId project.SWRVE_GROUP_ID
            version project.SWRVE_SDK_VERSION
            artifacts = [androidGoogleJavadocsJar, "$buildDir/outputs/aar/${project.name}-google-release.aar", androidGoogleSourcesJar]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.getByName("googleReleaseCompileClasspath").allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (it.name == 'SwrveSDKCommon') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_COMMON_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else if (it.name == 'SwrveConversationSDK') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_CONVERSATIONS_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else if (it.name == 'SwrveSDKPush') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_PUSH_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else {
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }
            }
        }
        amazon(MavenPublication) {
            artifactId project.SWRVE_AMAZON_ARTIFACT_ID
            groupId project.SWRVE_GROUP_ID
            version project.SWRVE_SDK_VERSION
            artifacts = [androidAmazonJavadocsJar, "$buildDir/outputs/aar/${project.name}-amazon-release.aar", androidAmazonSourcesJar]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.getByName("amazonReleaseCompileClasspath").allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (it.name == 'SwrveSDKCommon') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_COMMON_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else if (it.name == 'SwrveConversationSDK') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_CONVERSATIONS_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else if (it.name == 'SwrveSDKPush') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_PUSH_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else {
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }
            }
        }
        firebase(MavenPublication) {
            artifactId project.SWRVE_FIREBASE_ARTIFACT_ID
            groupId project.SWRVE_GROUP_ID
            version project.SWRVE_SDK_VERSION
            artifacts = [androidFirebaseJavadocsJar, "$buildDir/outputs/aar/${project.name}-firebase-release.aar", androidFirebaseSourcesJar]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.getByName("firebaseReleaseCompileClasspath").allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (it.name == 'SwrveSDKCommon') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_COMMON_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else if (it.name == 'SwrveConversationSDK') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_CONVERSATIONS_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else if (it.name == 'SwrveSDKPush') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_PUSH_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else {
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }
            }
        }
    }
}

task androidCoreJavadoc(type: Javadoc) {
    description "Generates Javadoc for Core."
    source = files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.core.java.srcDirs)
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(android.libraryVariants.core.javaCompile.classpath.files) + files(ext.androidJar)
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/README.md'
    failOnError false
}
task androidCoreJavadocsJar(type: Jar) {
    description "Package Javadoc for Core."
    classifier = 'javadoc'
    from androidCoreJavadoc
}
task androidCoreSourcesJar(type: Jar) {
    description "Package sources for Core."
    classifier = 'sources'
    from files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.core.java.srcDirs)
}

task androidGoogleJavadoc(type: Javadoc) {
    description "Generates Javadoc for Google."
    source = files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.google.java.srcDirs)
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(android.libraryVariants.google.javaCompile.classpath.files) + files(ext.androidJar)
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/README.md'
    failOnError false
}
task androidGoogleJavadocsJar(type: Jar) {
    description "Package Javadoc for Google."
    classifier = 'javadoc'
    from androidGoogleJavadoc
}
task androidGoogleSourcesJar(type: Jar) {
    description "Package sources for Google."
    classifier = 'sources'
    from files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.google.java.srcDirs)
}

task androidAmazonJavadoc(type: Javadoc) {
    description "Generates Javadoc for Amazon."
    source = files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.amazon.java.srcDirs)
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(android.libraryVariants.amazon.javaCompile.classpath.files) + files(ext.androidJar)
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/README.md'
    failOnError false
}
task androidAmazonJavadocsJar(type: Jar) {
    description "Package Javadoc for Amazon."
    classifier = 'javadoc'
    from androidAmazonJavadoc
}
task androidAmazonSourcesJar(type: Jar) {
    description "Package sources for Amazon."
    classifier = 'sources'
    from files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.amazon.java.srcDirs)
}

task androidFirebaseJavadoc(type: Javadoc) {
    description "Generates Javadoc for Firebase."
    source = files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.firebase.java.srcDirs)
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(android.libraryVariants.firebase.javaCompile.classpath.files) + files(ext.androidJar)
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/README.md'
    failOnError false
}
task androidFirebaseJavadocsJar(type: Jar) {
    description "Package Javadoc for Firebase."
    classifier = 'javadoc'
    from androidFirebaseJavadoc
}
task androidFirebaseSourcesJar(type: Jar) {
    description "Package sources for Firebase."
    classifier = 'sources'
    from files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.firebase.java.srcDirs)
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'android'
        name = System.getProperty('bintray.pkg.name') == null ? 'swrve-sdk' : System.getProperty('bintray.pkg.name')
        userOrg = 'swrve-inc'
        licenses = ['Apache-2.0']
        desc = 'Swrve SDK'
        websiteUrl = "https://www.swrve.com"
        publish = true
        version {
            name = project.SWRVE_SDK_VERSION
        }
    }
    String bintrayPublication = System.getProperty('bintray.publication') == null ? 'core' : System.getProperty('bintray.publication')
    publications = [bintrayPublication]
}
